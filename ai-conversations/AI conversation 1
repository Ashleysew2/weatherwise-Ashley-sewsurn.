Tool: ChatGPT 
Date: 23.05.2025
can you help me with the following assignment?


ChatGPT said:
Of course! Please share the details of the assignment, and I’ll help you with it.







You said:
n this assignment, you will develop a Python application called "Weather Advisor" that combines weather data access with conversational AI capabilities. This project brings together several key concepts you've learnt throughout the course, including modular programming, data visualisation, user interfaces, and—crucially—intentional prompting techniques when working with AI.

Your solution should demonstrate both your technical Python skills and your ability to effectively direct AI tools as part of your development workflow. This project will challenge you to apply your skills creatively, and you'll end up with a practical application you can be proud of.

Note on Assignment Length: This specification is comprehensive to accommodate various workflows and AI tools. Don't be intimidated by its length—it's designed to provide clarity and flexibility for all students, regardless of which AI tools you prefer to use. The detailed requirements help you understand how to demonstrate your process of working with AI, which is a key component of this assignment.

Embracing the Challenge: This project may initially seem ambitious, but remember that you've already learnt all the fundamental techniques needed to succeed. The weekly activities and mini-projects have prepared you with the building blocks—from working with APIs to creating chatbots to visualising data. This assignment brings these pieces together into something greater than the sum of its parts. The satisfaction of overcoming this challenge and creating something genuinely useful will be well worth the effort!

Learning Objectives
By completing this assignment, you will:

Implement a complete, functional Python application with modular design
Apply data visualisation techniques to weather information
Create intuitive user interfaces using console-based menus or widgets
Demonstrate your ability to use intentional prompting with AI tools
Practice version control using GitHub
Document your development process and AI interactions
Apply critical thinking when evaluating and improving AI-generated code
Project Requirements
Core Features (Required)
Your Weather Advisor application must include:

Weather Data Component

Retrieve weather data for user-specified locations
Display current conditions and forecasts
Include at least 2 different data visualisations (e.g., temperature trends, precipitation chances)
Natural Language Interface

Allow users to ask weather-related questions in plain English
Parse these questions to determine the weather information needed
Provide natural-language responses that answer the user's question
User Experience

Implement an intuitive menu system using pyinputplus
Include clear instructions and error handling
Provide a clean, organised display of information
Technical Requirements
Your implementation must demonstrate:

Modular Design

Break your program into logical functions and modules
Use appropriate naming conventions
Include docstrings and comments
Core Functions

Your application should implement these functions (provided as stubs in the starter notebook):
def get_weather_data(location, forecast_days=5):
    """
    Retrieve weather data for a specified location.
    
    Args:
        location (str): City or location name
        forecast_days (int): Number of days to forecast (1-5)
        
    Returns:
        dict: Weather data including current conditions and forecast
    """
    pass
    
def parse_weather_question(question):
    """
    Parse a natural language weather question.
    
    Args:
        question (str): User's weather-related question
        
    Returns:
        dict: Extracted information including location, time period, and weather attribute
    """
    pass
    
def generate_weather_response(parsed_question, weather_data):
    """
    Generate a natural language response to a weather question.
    
    Args:
        parsed_question (dict): Parsed question data
        weather_data (dict): Weather data
        
    Returns:
        str: Natural language response
    """
    pass
    
def create_temperature_visualisation(weather_data, output_type='display'):
    """
    Create visualisation of temperature data.
    
    Args:
        weather_data (dict): The processed weather data
        output_type (str): Either 'display' to show in notebook or 'figure' to return the figure
        
    Returns:
        If output_type is 'figure', returns the matplotlib figure object
        Otherwise, displays the visualisation in the notebook
    """
    pass
    
def create_precipitation_visualisation(weather_data, output_type='display'):
    """
    Create visualisation of precipitation data.
    
    Args:
        weather_data (dict): The processed weather data
        output_type (str): Either 'display' to show in notebook or 'figure' to return the figure
        
    Returns:
        If output_type is 'figure', returns the matplotlib figure object
        Otherwise, displays the visualisation in the notebook
    """
    pass
User Interface Flexibility

You may implement your user interface using either:
Console-based menus with pyinputplus
Interactive widgets using ipywidgets
A hybrid approach combining both
Your UI should call the core functions rather than duplicating their functionality
Choose the approach that best showcases your application
Data Handling

Retrieve and process weather data
Store relevant information for use in the application
Handle edge cases (e.g., invalid locations, missing data)
Visualisation

Create at least 2 different types of visualisations
Ensure visualisations are properly labelled and clear
Make visualisations relevant to the user's query when possible
Weather Data Source Options
You have three options for implementing the weather data component. All options can earn full marks for the core requirements, but more advanced implementations may qualify for bonus points.

Foundation Option: Use the provided fetch-my-weather package

A simplified interface to wttr.in weather services that handles API complexities
Provides consistent data structures and error handling
Allows you to focus on application logic and other components
Perfect for getting started and meeting core requirements
Standard Option: Use the wttr.in service API directly

Example: https://wttr.in/London?format=j1 returns JSON data
Documentation: https://github.com/chubin/wttr.in
Requires implementing your own request handling and data processing
Demonstrates API interaction skills and offers more customisation
Extension Option: Implement your own solution with OpenWeatherMap or similar

Requires obtaining and securely handling an API key
Offers access to more detailed weather data
Provides experience with commercial API integration
Eligible for bonus points if well-implemented with proper error handling
Note on Bonus Points: Students who implement their own weather data retrieval (options 2 or 3) with additional features beyond basic requirements may receive bonus consideration (up to 5% extra). Examples of bonus-worthy features include:

Robust caching to minimise API calls
Comprehensive error handling with informative user feedback
Support for multiple weather data sources with a consistent interface
Advanced data processing that enhances the user experience
Remember that your choice should align with your comfort level and project goals. All options can achieve full marks for the core requirements when implemented correctly, so choose the approach that you feel most confident with!

Development Process Requirements
GitHub Integration
Create a GitHub repository for your project
Make regular, meaningful commits throughout development
Your final submission should have at least 15 commits that show progression
Include a clear README.md file with instructions for running your application
Intentional Prompting Documentation
A critical component of this assignment is documenting your use of AI tools:

Implementation Options Exploration

Include an initial AI conversation where you explore and compare the three implementation options
This conversation should demonstrate your analytical thinking about the project requirements and should go deeper than simply asking which option is best
Show how you evaluated the technical considerations, design implications, and alignment with your skills for each option
Your conversation should reflect a thoughtful decision-making process that led to your final choice
Required Prompting Techniques You must demonstrate at least 5 of the following intentional prompting techniques:

Restate the problem in your own words to the AI
Identify input/output requirements through targeted prompts
Request pseudocode before asking for implementation
Challenge edge cases in AI-generated code
Request modular design improvements
Ask for code explanations to ensure understanding
Request iterative improvements to initial solutions
Query design trade-offs for different implementation options
Before/After Examples

Include at least 3 clear examples showing:
Initial AI-generated code from your prompt
Your specific follow-up prompts that led to improvements
The improved code that resulted from your intentional prompting
Explanation of why your prompting strategy was effective
AI Conversation Documentation Requirements
You must document your AI interactions using the following format:

File Format

Save conversations as plain text files (.txt)
Name files sequentially: conversation1.txt, conversation2.txt, etc.
Submit at least 5 significant conversations that demonstrate different aspects of your development process
Content Requirements

Include a brief header for each conversation (e.g., "Conversation about weather data retrieval")
Clearly indicate who is speaking (e.g., "Me:", "AI:")
Include the full conversation with both your prompts and the AI's responses
Add brief comments or notes where relevant to highlight important points
Important Guidelines

Copy conversations directly from the chat interface
Include complete interactions, not just selected snippets
Do not submit screenshots or images of conversations
If a conversation is very long, you may focus on the most relevant sections, but indicate where content has been omitted
Include at least one conversation showing how you handled an incorrect or problematic AI response
Documentation for Alternative AI Tools
If you use tools like GitHub Copilot, Cursor, Whisper, Claude-Code, or other coding assistants that don't provide traditional conversation logs:

Screen Recording Option

You may submit brief screen recordings (2-5 minutes each) showing your interaction with these tools
The recordings should clearly show both your inputs and the AI's suggestions
Include a brief narration or text overlay explaining what you're doing and how you're directing the AI
Manual Documentation Option

Create a log that approximates the conversation by documenting:
What you asked or prompted (partial code, comments, etc.)
What the AI suggested (completions, alternatives, etc.)
How you evaluated and refined those suggestions
Structure this as a series of exchanges, similar to a chat conversation
Include screenshots of the interaction where helpful, but these should supplement text, not replace it
Tool-Specific Requirements

GitHub Copilot: Document your use of comments to guide suggestions and how you refined them
Cursor: You may use the chat sidebar for more conversational interactions and submit those logs
Whisper or voice-based tools: Transcribe key voice commands and responses
Claude-Code and similar tools: Capture the prompts and responses
Multilingual Considerations

If English is not your first language, you may conduct initial AI conversations in your preferred language
Submit both the original conversation in your language and an English translation
All code, comments, documentation, and final submission materials must be in English
Consider using the six-step methodology in your native language for planning, then translate when implementing
Regardless of the AI tool you use, you must still demonstrate intentional prompting by showing how you guided the tool to help you solve problems rather than accepting its first suggestions. All students must include the required "before/after" examples regardless of which AI tools they use.

Conversations must be submitted as searchable text (or as described above for alternative tools), not images. Submissions that use screenshots or non-text formats for conversations will receive significant reduced marks for that component.

Project Implementation Options
You may structure your project in one of the following ways:

Option 1: Advanced Weather Dashboard
Create a comprehensive weather dashboard with multiple visualisation types
Allow filtering by time periods and weather attributes
Include a chat interface for natural language queries about displayed data
Option 2: Weather-Aware Chatbot
Focus on the conversational interface as the primary interaction method
Retrieve and display weather information based on natural language analysis
Use visualisations to supplement text responses when appropriate
Option 3: Hybrid Approach (Recommended)
Implement both dashboard and conversational features
Allow users to switch between interaction modes
Ensure visualisation and chat components are well-integrated
Notebook Organisation Requirements
Your Google Colab notebook should demonstrate clear organisation through a cell-based modular approach:

Cell-Based Structure
Organise your notebook into clearly labelled sections using markdown cells
Group related functionality together in dedicated sections
Include a table of contents at the top of the notebook
Required Sections
Your notebook should include at least these labelled sections:

Setup and Configuration - Imports and initial setup
Weather Data Functions - Functions for retrieving and processing weather data
Visualisation Functions - Code for creating data visualisations
Natural Language Processing - Functions for handling user questions
User Interface - Menu system and display functions
Main Application Logic - Core functionality that ties everything together
Testing and Examples - Demonstrations of key features
Modular Design
Define general-purpose functions that can be reused
Minimise code duplication
Keep functions focused on single responsibilities
Include appropriate comments and docstrings
The organisation of your notebook will be part of your assessment, with particular attention to:

Logical grouping of related functionality
Clear section headings and descriptions
Appropriate separation of concerns
Documentation quality
Weather Data API Testing
When testing your application, we will use mock versions of the weather API services. To ensure compatibility:

Your get_weather_data() function should follow the provided signature
If using OpenWeatherMap, access the API key via: os.environ.get("OPENWEATHER_API_KEY")
Your code should handle cases where the API returns incomplete data
For testing, we will simulate various weather conditions and error cases
Ensure your code can handle both successful and failed API calls gracefully
Use the requests library for API calls, and ensure you handle exceptions properly


ChatGPT said:
Update memory? “Is developing a Python application called "Weather...”

Yes

No
Thanks for sharing the full assignment details—this is a comprehensive and ambitious project, but very doable if we break it into parts. Here's how we can approach it:

✅ Step 1: Planning Your Project Structure
Suggested Folder Structure (if using GitHub locally)
bash
Copy
Edit
weather_advisor/
├── data/                    # (Optional) For caching or sample data
├── images/                  # Save your visualisations
├── src/
│   ├── __init__.py
│   ├── weather_api.py       # get_weather_data function
│   ├── nlp.py               # parse_weather_question & generate_weather_response
│   ├── visualisation.py     # plotting functions
│   └── ui.py                # menu or widget interface
├── main.py                  # Or use a notebook
├── README.md
├── requirements.txt
└── .gitignore
✅ Step 2: Choose a Weather API
Let's choose based on your comfort level:

Simplest: fetch-my-weather package (provided)

Intermediate: Direct use of wttr.in

Advanced: OpenWeatherMap with an API key

Would you like help deciding which to use based on your experience with APIs?

✅ Step 3: Starter Code Scaffolding
I can help you generate a base implementation for each core function with docstrings and error handling.

For example:

python
Copy
Edit
# weather_api.py
import requests

def get_weather_data(location, forecast_days=5):
    url = f"https://wttr.in/{location}?format=j1"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return data  # You’ll need to extract and format what you want
    except Exception as e:
        print(f"Error fetching weather data: {e}")
        return None
✅ Step 4: Set Up Prompting Examples
You need to:

Show conversations where you intentionally refine AI responses

Save them as .txt files

I can simulate those with you here (e.g., “AI, generate pseudocode for temperature chart…”), and you can copy them to files.

Would you like to start generating those right away?

✅ Step 5: Notebook Structure
Use clear headers:

markdown
Copy
Edit
# Table of Contents
1. Setup and Configuration
2. Weather Data Functions
3. Visualisation Functions
4. Natural Language Processing
5. User Interface
6. Main Application Logic
7. Testing and Examples
✅ Step 6: GitHub Integration
Create a repo

Make frequent commits (at least 15)

Use descriptive messages ("Add temperature visualisation function")

Include a good README.md

Would you like me to generate a starter version of the project with:

Base function implementations

A sample prompt conversation

Notebook outline

Or do you want to build it gradually together?








