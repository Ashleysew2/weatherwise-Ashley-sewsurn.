title: "Before/After Example: WeatherWise Weather Retrieval & Advisor System"
author: "Ashley Sewsurn"
format: 
  pdf:

    highlight-style: github
 
---

## Initial Prompt

Create a Python program that fetches weather data from OpenWeatherMap and allows users to ask questions using natural language.

python
Copy code

## Initial AI-Generated Code (Before)

```python
import requests

def get_weather_data(city):
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid=YOUR_API_KEY&units=metric"
    response = requests.get(url)
    return response.json()
My follow ups:
1. Modular structure with separate functions for fetching data, answering questions, and plotting.
2. Error handling for HTTP issues and missing keys.
3. A simple command-line interface with looping interaction.
4. Integration with matplotlib for temperature trends.
5. Support for processing user questions using keywords.
6. Better code structure and documentation.

And this is the after.
import requests
import matplotlib.pyplot as plt

# Fetch weather data
def fetch_weather_data(city, api_key):
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric&cnt=40"
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching weather data: {e}")
        return None

# Plot temperature forecast
def plot_temperature_forecast(weather_data, city):
    try:
        temps = [entry['main']['temp'] for entry in weather_data['list']]
        times = [entry['dt_txt'] for entry in weather_data['list']]
        plt.figure(figsize=(12, 5))
        plt.plot(times, temps, marker='o')
        plt.title(f"Temperature Forecast for {city}")
        plt.xlabel("Time")
        plt.ylabel("Temperature (°C)")
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.grid(True)
        plt.show()
    except Exception as e:
        print(f"Error in plotting: {e}")

# Basic question answering
def answer_question(weather_data, question):
    if "temperature" in question.lower():
        temp_now = weather_data['list'][0]['main']['temp']
        print(f"The current temperature is {temp_now}°C.")
    elif "rain" in question.lower():
        if any("rain" in entry.get("weather", [{}])[0].get("main", "").lower() for entry in weather_data['list']):
            print("Yes, there is rain in the forecast.")
        else:
            print("No rain is expected in the forecast.")
    else:
        print("Sorry, I can't answer that yet.")

# Main loop
def main():
    api_key = "YOUR_API_KEY"  # Replace with your real OpenWeatherMap API key
    city = input("Enter city name: ")
    weather_data = fetch_weather_data(city, api_key)
    
    if weather_data:
        plot_temperature_forecast(weather_data, city)
        while True:
            question = input("\nAsk a weather question (or type 'exit'): ")
            if question.lower() == 'exit':
                break
            answer_question(weather_data, question)

if __name__ == "__main__":
    main()
